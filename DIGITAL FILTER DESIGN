//DESIGN AND SIMULATE A DIGITAL FIR (FINITE IMPULSE RESPONSE) FILTER USING VERILOG OR MATLAB.

module fir_filter (
    input clk,
    input rst,
    input signed [15:0] x_in,
    output reg signed [31:0] y_out
);

    parameter N = 4;
    reg signed [15:0] coeffs [0:N-1] = '{16'd1, 16'd2, 16'd3, 16'd4};  // Example coefficients
    reg signed [15:0] shift_reg [0:N-1];

    integer i;
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            for (i = 0; i < N; i = i + 1)
                shift_reg[i] <= 0;
            y_out <= 0;
        end else begin
            // Shift
            for (i = N-1; i > 0; i = i - 1)
                shift_reg[i] <= shift_reg[i-1];
            shift_reg[0] <= x_in;

            // MAC (Multiply and Accumulate)
            y_out <= 0;
            for (i = 0; i < N; i = i + 1)
                y_out <= y_out + shift_reg[i] * coeffs[i];
        end
    end
endmodule


// A testbench to simulate signal input/output.
module tb_fir_filter;
    reg clk, rst;
    reg signed [15:0] x_in;
    wire signed [31:0] y_out;

    fir_filter dut(.clk(clk), .rst(rst), .x_in(x_in), .y_out(y_out));

    initial begin
        clk = 0; forever #5 clk = ~clk;  // 100MHz clock
    end

    initial begin
        rst = 1; x_in = 0;
        #10 rst = 0;
        #10 x_in = 16'd1;
        #10 x_in = 16'd2;
        #10 x_in = 16'd3;
        #10 x_in = 16'd4;
        #10 x_in = 16'd0;
        #50 $stop;
    end
endmodule
